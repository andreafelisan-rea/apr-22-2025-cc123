using System;
//Circumference and Perimeter
class Shape
{
    protected double radius = 0, side1 = 0, side2 = 0;

    public Shape()
    {
        Console.WriteLine("Shape Initialized");
    }

    public Shape(double radius) //Parameterozed
    {   
        //this => referring on the class Shape
        this.radius = radius;  
        //Console.WriteLine("Circle Shape Initialized radius: " + this.radius);
    }

    public Shape(double side1, double side2) //method
    {
        this.side1 = side1; 
        this.side2 = side2;
        //Console.WriteLine("Square  side 1: " + this.side1 + " side 2: " + this.side2);
    }
}

class Circle: Shape  //Child class
{   
    //Circle Constructor overrides Shape Constructor
    //Storing Radius into Circle radius
    public Circle(double radius) : base(radius) //Inheritance for radius
    {
        Console.WriteLine("Circle radius: " + this.radius);
    }

    public void Area()
    {
        const double pi = 3.14;
        double area = pi * this.radius * this.radius; 
        Console.WriteLine("Circle Area: " + area);
    }
    public void Circumference() {
        double pi = 3.14;
        double circum = 2 * pi * this.radius;
        Console.WriteLine("Circumference of the Circle: " + circum);
    }
}

class Square : Shape
{   
    //Storing side1 and side2 into square.side1 and square.side2
    public Square(double side1, double side2) : base(side1, side2)
    {
        Console.WriteLine("Square side 1: " + this.side1 + " side 2: " + this.side2);
    }

    public void Area()
    {
        double area = this.side1 * this.side2;
        Console.WriteLine("Square Area: " + area);
    }
    public void Perimeter(){
        double peri = this.side1 + this.side2;
        Console.WriteLine("Perimeter of the Square: " + peri);
    }
}

class Program
{
    static void Main()
    {
        Circle test_shape = new Circle(2);
         test_shape.Area();
         test_shape.Circumference();
        Square test_shape2 = new Square(2.5, 4.5);
        test_shape2.Area();
        test_shape2.Perimeter();
    }
}